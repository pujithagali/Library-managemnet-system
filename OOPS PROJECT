#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Library {
public:
    int id;
    string bookname;
    string authorname;
    string topic;
    float price;

    Library(int _id, const string& _bookname, const string& _authorname, const string& _topic, float _price)
        : id(_id), bookname(_bookname), authorname(_authorname), topic(_topic), price(_price) {}
};

class LibrarySystem {
private:
    vector<Library> books;

public:
    void addBook() {
        int id;
        string bookname, authorname, topic;
        float price;

        cout << "\nEnter Book ID: ";
        cin >> id;
        cout << "\nEnter Book Name: ";
        cin >> bookname;
        cout << "\nEnter Topic: ";
        cin >> topic;
        cout << "\nEnter Author Name: ";
        cin >> authorname;
        cout << "\nEnter Price: ";
        cin >> price;

        books.emplace_back(id, bookname, authorname, topic, price);
        cout << "Book added successfully.\n";
    }

    void deleteBook() {
        string bname;
        cout << "\nEnter book name to delete: ";
        cin >> bname;

        auto it = remove_if(books.begin(), books.end(), [bname](const Library& book) {
            return book.bookname == bname;
        });

        if (it != books.end()) {
            books.erase(it, books.end());
            cout << "Book deleted successfully.\n";
        } else {
            cout << "Book not found.\n";
        }
    }

    void displayBooks() {
        cout << "\nID\t\tBOOK NAME\t\tTOPIC\t\tAUTHOR\t\t\tPRICE\n";
        for (const auto& book : books) {
            cout << book.id << "\t\t" << book.bookname << "\t\t" << book.topic << "\t\t" << book.authorname << "\t\t" << book.price << "\n";
        }
        cout << "\n\n";
    }

    void updateBook() {
        string bname;
        cout << "\nEnter book name to update: ";
        cin >> bname;

        auto it = find_if(books.begin(), books.end(), [bname](const Library& book) {
            return book.bookname == bname;
        });

        if (it != books.end()) {
            cout << "\nEnter new BID: ";
            cin >> it->id;
            cout << "\nEnter new book name: ";
            cin >> it->bookname;
            cout << "\nEnter new topic: ";
            cin >> it->topic;
            cout << "\nEnter new Author name: ";
            cin >> it->authorname;
            cout << "\nEnter new Price: ";
            cin >> it->price;

            cout << "Book updated successfully.\n";
        } else {
            cout << "Book not found.\n";
        }
    }

    void searchBook() {
        string bname;
        cout << "Enter Book name to search: ";
        cin >> bname;

        auto it = find_if(books.begin(), books.end(), [bname](const Library& book) {
            return book.bookname == bname;
        });

        if (it != books.end()) {
            cout << it->id << "\t\t" << it->bookname << "\t\t" << it->topic << "\t\t" << it->authorname << "\t\t" << it->price << "\n";
        } else {
            cout << "NO BOOK FOUND\n";
        }
    }

    void priceRange() {
        float min, max;
        cout << "Enter min price: ";
        cin >> min;
        cout << "Enter max price: ";
        cin >> max;

        cout << "\nID\t\tBOOK NAME\t\tTOPIC\t\tAUTHOR\t\tPRICE\n";
        for (const auto& book : books) {
            if (book.price > min && book.price < max) {
                cout << book.id << "\t\t" << book.bookname << "\t\t" << book.topic << "\t\t" << book.authorname << "\t\t" << book.price << "\n";
            }
        }
        cout << "\n\n";
    }

    void classifyAuthor() {
        string aname;
        cout << "Enter author name: ";
        cin >> aname;

        cout << "\nID\t\tBOOK NAME\t\tTOPIC\t\tAUTHOR\t\tPRICE\n";
        for (const auto& book : books) {
            if (book.authorname == aname) {
                cout << book.id << "\t\t" << book.bookname << "\t\t" << book.topic << "\t\t" << book.authorname << "\t\t" << book.price << "\n";
            }
        }
        cout << "\n\n";
    }

    void similarTopic() {
        string tname;
        cout << "Enter topic name: ";
        cin >> tname;

        cout << "\nID\t\tBOOK NAME\t\tTOPIC\t\tAUTHOR\t\t\tPRICE\n";
        for (const auto& book : books) {
            if (book.topic == tname) {
                cout << book.id << "\t\t" << book.bookname << "\t\t" << book.topic << "\t\t" << book.authorname << "\t\t" << book.price << "\n";
            }
        }
        cout << "\n\n";
    }
};

int main() {
    LibrarySystem librarySystem;

    while (true) {
        int choice;
        cout << "\n\nSELECT YOUR CHOICE\n";
        cout << "\n 1.ADD BOOK\n";
        cout << "\n 2.DELETE BOOK\n";
        cout << "\n 3.DISPLAY BOOKS\n";
        cout << "\n 4.UPDATE BOOK\n";
        cout << "\n 5.SEARCH BOOK\n";
        cout << "\n 6.CLASSIFY W.R.T PRICE\n";
        cout << "\n 7.CLASSIFY W.R.T AUTHOR\n";
        cout << "\n 8.CLASSIFY W.R.T TOPIC\n";
        cout << "\n 9.EXIT\n\nENTER CHOICE:";
        cin >> choice;

        switch (choice) {
            case 1:
                librarySystem.addBook();
                break;
            case 2:
                librarySystem.deleteBook();
                break;
            case 3:
                librarySystem.displayBooks();
                break;
            case 4:
                librarySystem.updateBook();
                break;
            case 5:
                librarySystem.searchBook();
                break;
            case 6:
                librarySystem.priceRange();
                break;
            case 7:
                librarySystem.classifyAuthor();
                break;
            case 8:
                librarySystem.similarTopic();
                break;
            case 9:
                cout << "Exiting the program.\n";
                return 0;
            default:
                cout << "Invalid choice. Please enter a valid option.\n";
        }
    }

    return 0;
}
